9FEB - Day1
----------------------

    front end / UI / Web development (client side)
    ---------------------------------------------------
    HTML
        - 'what' content you want to place on your webpage
        - to define 'structure' of your webpage

    CSS
        - 'how' the content should appear on the webpage    
        - to define 'style rules' for webpage

    JavaScript / ES5
        - Scripting language
        - it is interpreted language 
            - every browser has a 'JS engine' which executes JS code
                    chrome      = V8
                    firefox     = spidermonkey
                    IE          = chakra
        - 1997, introducted 
        - 1997, it was submitted to ECMA for standardization
        - since then, ECMA keeps publishing diff 'specifications' which 
                every browser has to implement 
        - the implemenation by the browser is called 'ECMAScript'
        -1997   ES1
        -1998   ES2
        -1999   ES3
        -2009   ES5


        - to provide functionalities on webpages 
            - DOM manipulation
            - Event handling
            - Business logic 
            - ajax calls / http calls
            - form validations
            ......

    JQuery
        - it is JS Library
        - it is fast/light-weight/cross-browser/open source 
        - it simplified JS tasks 
   

    Bootstrap / SemanticUI / Foundation ...
        - HTML+CSS+JQuery
        - to create 'responsive' webpages

    ES6 - 2015 - (Modern JS)
    ----------------------
        - introducted many new features 
        - arrow functions 
        - let,const keywords 
        - spread operators, rest parameters
        - module system
        - promises/async-await/generators 
        - classes & objects
        - .....


    var, let & const keywords

        1. var
            - global/function scoped 

        2. let
            - block/function scoped 

        3. const
            - block/function scoped 
            - cannot be reassigned 

    arrow functions

    spread operator 

    rest parameter


    typescript
        - it is compiled language
        - it cannot be executed inside browsers
        - it is superset of ES6
        - ++ some additional features
            - type system
            - decorators
            - OOPS features
            - generics
            ......

    Type system
    ---------------------
        number
        string 
        boolean 
        any 
        void 
        never 

        object & object type inference 

        create a custom object type
            1. using 'type' keyword 
            2. using interface  
            3. using class 


    Javascript tools
    -------------------------------------
        1. transpilers
                - Babel (convert moden js to legacy js)
        2. bundlers 
                - Webpack (bundles several files together)

    Angular / React / Vue / Ember


    Language            Library/apis/packages           Framework
    C#/VB                                               .NET

    Java                                                Spring

    JavaScript          JQuery                          Angular

        ||                  ||                          ||
    programming         simplifies                  standardize
    capabilities        tasks                       process







    AngularJS/Angular1.x
        - 2010
        - javascript based 
        - MVC architecture (model-view-controlller)
        - uses 'controller' based architecture

    Angular2
        - May 2016
        - complete rewrite of angularJS
        - typescript 
        - uses 'component based architecture'
    
    Angular 4
        - Dec 2016
        - faster compilation 
        - some technical changes 
        - HttpClient module
    
    Angular5
        - Nov 2017
        - service worker (offline browsing)
        - build optimizer 
        - compiler imporvements 
        - 
    Angular6
        - May 2018
        - rxjs 6 / some changes 
        - angular elements 
        - angular material 
        - ...

    Angular7
        - Oct 2018
        - CLI prompts 
        - improved Angular Material & CDK
            - Virtual Scrolling 
            - Drag & Drop 
        - 
    Angular8
        - May 2019


Environment Setup for Angular Development 
------------------------------------------------
    1. download/install nodejs 
        - it is used to perform some build operations for angular projects
        - it comes with NPM (node package manager)

        > node -v
        > npm -v 

    2. install angular-cli 
        - it is a tool to create/build/test angular projects 

        > npm install -g @angular/cli

    3. install any editor 
            - VS code
            - atom
            - brackets
            - sublime 
            - ... any editor 

Create an Angular Project using CLI
--------------------------------------
    > ng new projectname



Building Blocks of Angular appear

1. Component 
        - every angular app has at least one root component (AppComponent)
        - a component is responsibe to render a 'template'
        - it encapsulates data,logic and view 
        - a typescript class {}

2. Template 
    - represents a 'view' using html

3. Module 
    - every angular app has atleast one root module (AppModule)
    - module is used to register all the components,directives, pipes, services, etc.

4. directives
5. pipes
6. services 
....


Angular Project Directory structure
-----------------------------------------
    |
    |-->e2e
    |   |-> stores end to end test cases 
    |
    |-->node_modules
    |   |-> stores all the dependencies
    |
    |-->src
    |   |
    |   |-->app
    |   |   |->app.module.ts
    |   |   |->app.component.ts
    |   |   |->app.component.html
    |   |   
    |   |-->assets
    |   |   |-> store all images/static files
    |   |
    |   |-->environments
    |   |   |->environment.ts
    |   |   |->environment.prod.ts
    |   |
    |   |-->index.html
    |   |   |-> 1st file which get served
    |   |
    |   |-->main.ts
    |   |   |-> entry point of your application
    |   |
    |   |-->styles.css
    |   |   |-> global css file 
    |
    |-->package.json
    |       |-> lists all the dependencies & define scripts
    |       |-> defines some metadata of angular project
    |
    |-->tsconfig.json
    |       |-> typescript related configuration
    |
    |-->angular.json
    |       |-> angular project related configuration
    |


>ng serve 



header.component.ts
--------------------
import {Compoment} from '@angular/core'

@Component({
    selector:'app-header',
    tempalteUrl: './header.component.html',
    styleUrls: []
})
export class HeaderComponent{

}


header.component.html
---------------------------
    //define html code

header.component.css
-------------------------
    //define css rules 

header.component.spec.ts
    //define test cases 



Create a new component
------------------------------
    > ng generate component Header 
    > ng g c Header 

Data Binding
-----------------
    1. string interpolation 
            - output some text dynamically into headings, paragraphs, div 

        {{ tsField }}

    2. property binding 
            - bind a value a tsField to certain domProperties 

                <ele [domProperty]='tsField'></ele>

    3. event binding 
            - bind a handler/eventlistener to a domEvent 

    4. two way binding 

            [(ngModel)]

    5. Style binding 
            <h1 [style.backgroundColor]='bgColor'>{{ companyName }}</h1>

    6. class binding 
            <h1 [class.bordered]="isActive">{{ companyName }}</h1>

Day2
---------------------------------
directives
------------------------
    - attribute directives
        - enhance an element 
        [ngClass]
        [ngStyle]
    - structural directives
        - make changes in dom structure 
        - show/hide elements conditionally / iterate each item in array and repeat the element 
        *ngIf

                <div *ngIf='true'> this is div </div>

                <div *ngIf='x>=10'> this is div </div>

                <div *ngIf='someFun()'> this is div </div>

        *ngFor
        *ngSwitchCase
    - component directives 
            <app-header>
            <app-courses>

Custom directives
-----------------------------







pipes
--------------------
    - pipes are used to transform output in the template 

    uppercase
    lowercase
    currency
    number
    date

    

    template string

        function myfn(a, b, c, d){
                
                return `value of a = ${a} and value of b = ${b}`
        
        }

         function myfn(a, b, c, d){
                
                return 'value of a =' + a + ' and value of b = '+ b'
        
        }

Form handling
-------------------------
    - two approaches to handle forms in angular 
    - @angular/forms library has below node_modules     
            a. FormsModule
            b. ReactiveFormsModlue
    - these modules provide diff directives, classes, services  i.e. 

        directives  
            NgForm

        Objects 

            FormGroup 
                - formgroup object represents value/validity status of a group of "formcontrol" ojects.
                - value, valid, touched, untouched, controls, ......

            FormControl 
                - formcontrol object represents an individual form element i.e. text field/checkbox/radio/etc.

            FormArray 

        Services
            FormBuilder

    1. Template driven forms 
            - the objects i.e. FormGroup, FormControl etc. are created implicitely 
                just by adding few directives in template 
            - good for simple forms with basic validations 
            - easy to create 


            <form ngForm #loginform='ngForm' (ngSubmit)='login(loginform)'>
                    <input ...... ngModel name='xxxx' #localRef='ngModel' />

    2. Reactive forms 
            - the objects i.e. FormGroup, FormControl etc. need to be create explicitely through
                 code in component 
            - good for complex forms with custom validations 
            - more testable 
            - can have async validations 

    new FormControl(formState, 
                    ValidatorFn| ValidatorFn[] | null,
                    AsyncValidatorFn | AsyncValidatorFn[] | null )

    new FormControl('', [Validators.required], )


Routing
-------------------
    - @angular/router module is used to implement routing/navigation in angular apps 

/           = HomeComponent 

/login      = LoginComponent 

/register   = RegisterComponent 

/xxxxxxx   = XXXXComponent

1. define routes 

    import {Routes, RouterModule} from '@angular/router'

    const appRoutes:Routes = [
        {path:'', component:HomeComponent},
        {path:'login', component:LoginComponent },
        {path:'reigter', component:RegisterComponent}
    ] 

    @NgModule({
        declarations: [...],
        imports: [
            ......,
            RouterModule.forRoot(appRoutes)
        ]
    })

2. define a place to load the componets via routing 
        <router-outlet></router-outlet>

3. provide links/buttons to navigate

    <a href='/someurl'>somelinktext</a>

    <a routerLink='/someurl'>somelinktext</a>

    <a routerLink="['/register', 12,54]">somelinktext</a>


    vidly-api-node
    ---------------------

        movies
        -------------
            GET     http://localhost:3900/api/movies
                        - return all the movies from the db

            GET     http://localhost:3900/api/movies/movieid
                        - return a movie with given id

            DELETE  http://localhost:3900/api/movies/movieid
                        - remove a movie with given id 

            POST  http://localhost:3900/api/movies
                        - provide appropriate json data along with request body
                        - add / insert a new movie in db
            
            PUT  http://localhost:3900/api/movies/movieid
                        - provide appropriate json data along with request body
                        - updates the movie with given data
        genres
        -------------
            GET     http://localhost:3900/api/genres

            ...
            ...

HTTP calls/ ajax calls 
==============================

1. import 'HttpClientModule' in our appmodule
        @angular/common/http package provides a module called 'HttpClientModule'

2. inject 'HttpClient' service wherever you to communicate to server/backend 

3. use appropriate methods of HttpClient service to make http calls/requests 

        http.get()
            -> constructs a GET request and returns Observable



Dependency Injection
-----------------------------
** you can specifiy "Providers" for services to be injected 

    root                - only one single instance is used accross the application...

    AppComponent        - only the children of appcomponent will have the same instance of the service 

    Component level     - only this component and its children will have the same instance of the service 



                    AppComponent                        Directives          Services      
                        |
   ------------------------------------
   A        B           C           D                       
   |
 ---------
 a1     a2    



 Expected Errors
    = show appropriate message 

    - 400 - bad request 
    - 401 - unauthorized 
    - 403 - 
    - 400 to 499

 Unexpected Errors
        - show a generic message and log the error using some logger system 
    - server is down
    - db is down 
    - network down 
    - bug in backed 


    Observable
    --------------------


    Testing basics
    -----------------------